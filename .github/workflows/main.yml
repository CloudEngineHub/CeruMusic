name: AutoBuild

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: |
          npm i -g yarn
          yarn install

      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'
        run: yarn run build:win

      - name: Build Electron App for macOS
        if: matrix.os == 'macos-latest'
        run: yarn run build:mac

      - name: Build Electron App for Linux
        if: matrix.os == 'ubuntu-latest'
        run: yarn run build:linux

      - name: Cleanup Artifacts for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npx del-cli "dist/*" "!dist/*.exe" "!dist/*.zip" "!dist/*.yml" "!dist/*.blockmap"

      - name: Cleanup Artifacts for macOS
        if: matrix.os == 'macos-latest'
        run: |
          npx del-cli "dist/*" "!dist/(*.dmg|*.zip|*.pkg|latest*.yml|*.blockmap)"

      - name: Cleanup Artifacts for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          npx del-cli "dist/*" "!dist/(*.AppImage|*.deb|*.rpm|*.snap|*.tar.gz|latest*.yml)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-dist
          path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files for debugging
        run: |
          echo "Artifacts structure:"
          find artifacts -type f -name "*" | sort

      - name: Prepare release files
        run: |
          # 创建release_files目录并收集所有构建文件
          mkdir -p release_files
          
          # 复制Windows构建文件
          if [ -d "artifacts/windows-latest-dist" ]; then
            cp artifacts/windows-latest-dist/dist/* release_files/ 2>/dev/null || true
          fi
          
          # 复制macOS构建文件
          if [ -d "artifacts/macos-latest-dist" ]; then
            cp artifacts/macos-latest-dist/dist/* release_files/ 2>/dev/null || true
          fi
          
          # 复制Linux构建文件
          if [ -d "artifacts/ubuntu-latest-dist" ]; then
            cp artifacts/ubuntu-latest-dist/dist/* release_files/ 2>/dev/null || true
          fi
          
          echo "Files to be released:"
          ls -la release_files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*