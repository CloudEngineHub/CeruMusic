name: AutoBuild # 工作流的名称

permissions:
  contents: write # 给予写入仓库内容的权限

on:
  push:
    tags:
      - 'v*' # 当推送以v开头的标签时触发此工作流
  workflow_dispatch:

jobs:
  release:
    name: build and release electron app # 任务名称
    runs-on: ${{ matrix.os }} # 在matrix.os定义的操作系统上运行
    strategy:
      fail-fast: false # 如果一个任务失败,其他任务继续运行
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest] # 在Windows、macOS和Ubuntu上运行任务

    steps:
      - name: Check out git repository
        uses: actions/checkout@v4 # 检出代码仓库

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # 安装Node.js 22

      - name: Install Dependencies
        run: |
          npm i -g yarn
          yarn install  # 安装项目依赖

      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest' # 只在Windows上运行
        run: yarn run build:win # 构建Windows版应用

      - name: Build Electron App for macOS
        if: matrix.os == 'macos-latest' # 只在macOS上运行
        run: yarn run build:mac

      - name: Build Electron App for Linux
        if: matrix.os == 'ubuntu-latest' # 只在Linux上运行
        run: yarn run build:linux

      - name: Cleanup Artifacts for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npx del-cli "dist/*" "!dist/*.exe" "!dist/*.zip" "!dist/*.yml"  # 清理Windows构建产物,只保留特定文件

      - name: Cleanup Artifacts for macOS
        if: matrix.os == 'macos-latest'
        run: |
          npx del-cli "dist/*" "!dist/(*.dmg|*.zip|*.pkg|latest*.yml)"  # 清理macOS构建产物

      - name: Cleanup Artifacts for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          npx del-cli "dist/*" "!dist/(*.AppImage|*.deb|*.rpm|*.snap|*.tar.gz|latest*.yml)"  # 清理Linux构建产物

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist # 上传构建产物作为工作流artifact

release:
  name: Create Release
  runs-on: ubuntu-latest
  needs: build
  steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release with all files
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
