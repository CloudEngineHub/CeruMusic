name: Sync Existing Releases to AList

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: '要同步的特定标签（如 v1.0.0），留空则同步所有版本'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  sync-releases-to-alist:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Get all releases
        id: get-releases
        run: |
          response=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          echo "releases_json=$(echo $response | jq -c '.')" >> $GITHUB_OUTPUT

      - name: Sync releases to AList
        run: |
          RELEASES_JSON='${{ steps.get-releases.outputs.releases_json }}'
          SPECIFIC_TAG='${{ github.event.inputs.tag_name }}'

          echo "$RELEASES_JSON" | jq -c '.[]' | while read release; do
            tag_name=$(echo "$release" | jq -r '.tag_name')
            release_id=$(echo "$release" | jq -r '.id')
            
            if [ -n "$SPECIFIC_TAG" ] && [ "$tag_name" != "$SPECIFIC_TAG" ]; then
              echo "跳过 $tag_name，不是指定的标签 $SPECIFIC_TAG"
              continue
            fi

            echo "正在处理版本: $tag_name"

            assets=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets")

            echo "$assets" | jq -c '.[]' | while read asset; do
              asset_name=$(echo "$asset" | jq -r '.name')
              asset_url=$(echo "$asset" | jq -r '.url')
              
              echo "下载资源: $asset_name"
              
              # 下载资源文件
              curl -sL -o "$asset_name" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/octet-stream" \
                "$asset_url"
              
              if [ -f "$asset_name" ]; then
                echo "上传到 AList: $asset_name"
                
                # 使用 AList API 上传
                remote_path="/yd/ceru/$tag_name/$asset_name"
                
                response=$(curl -s -X PUT \
                  -H "Authorization: ${{ secrets.ALIST_TOKEN }}" \
                  -H "File-Path: $(echo -n "$remote_path" | base64 -w 0)" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary "@$asset_name" \
                  "${{ secrets.ALIST_BASE_URL }}/api/fs/put")
                
                if echo "$response" | jq -e '.code == 200' > /dev/null; then
                  echo "✅ 上传成功: $asset_name"
                else
                  echo "❌ 上传失败: $asset_name"
                  echo "响应: $response"
                fi
                
                rm "$asset_name"
              else
                echo "下载失败: $asset_name"
              fi
            done
          done
