name: Sync Existing Releases to AList

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: '要同步的特定标签（如 v1.0.0），留空则同步所有版本'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  sync-releases-to-alist:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Get all releases
        id: get-releases
        run: |
          response=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          echo "releases_json=$(echo "$response" | jq -c '.')" >> $GITHUB_OUTPUT

      - name: Sync releases to AList
        run: |
          # 读取输入参数
          SPECIFIC_TAG="${{ github.event.inputs.tag_name }}"
          RELEASES_JSON='${{ steps.get-releases.outputs.releases_json }}'
          
          echo "开始同步 releases..."
          echo "特定标签: ${SPECIFIC_TAG:-所有版本}"
          echo "根路径: /yd/ceru"

          # 处理每个 release
          releases_count=$(echo "$RELEASES_JSON" | jq '. | length')
          echo "找到 $releases_count 个 releases"

          for i in $(seq 0 $(($releases_count - 1))); do
            release=$(echo "$RELEASES_JSON" | jq -c ".[$i]")
            tag_name=$(echo "$release" | jq -r '.tag_name')
            release_id=$(echo "$release" | jq -r '.id')
            
            if [ -n "$SPECIFIC_TAG" ] && [ "$tag_name" != "$SPECIFIC_TAG" ]; then
              echo "跳过 $tag_name，不是指定的标签 $SPECIFIC_TAG"
              continue
            fi

            echo "正在处理版本: $tag_name (ID: $release_id)"

            # 获取该release的所有资源文件
            assets_json=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets")

            assets_count=$(echo "$assets_json" | jq '. | length')
            echo "找到 $assets_count 个资源文件"

            # 处理每个asset
            for j in $(seq 0 $(($assets_count - 1))); do
              asset=$(echo "$assets_json" | jq -c ".[$j]")
              asset_name=$(echo "$asset" | jq -r '.name')
              asset_url=$(echo "$asset" | jq -r '.url')
              asset_size=$(echo "$asset" | jq -r '.size')
              
              echo "下载资源: $asset_name (大小: $asset_size bytes)"

              # 下载资源文件
              safe_filename="./temp_download"
              
              if ! curl -sL -o "$safe_filename" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/octet-stream" \
                "$asset_url"; then
                echo "❌ 下载失败: $asset_name"
                continue
              fi
              
              if [ -f "$safe_filename" ]; then
                actual_size=$(wc -c < "$safe_filename")
                if [ "$actual_size" -ne "$asset_size" ]; then
                  echo "❌ 文件大小不匹配: $asset_name (期望: $asset_size, 实际: $actual_size)"
                  rm -f "$safe_filename"
                  continue
                fi

                echo "上传到 AList: $asset_name"
                
                # 使用 AList API 上传 - 路径以 /yd/ceru 开头
                remote_path="/yd/ceru/$tag_name/$asset_name"
                encoded_path=$(printf %s "$remote_path" | jq -s -R -r @uri)
                
                echo "完整路径: $remote_path"
                echo "编码路径: $encoded_path"
                
                # 直接上传，不使用任务模式
                response=$(curl -s -X PUT \
                  -H "Authorization: ${{ secrets.ALIST_TOKEN }}" \
                  -H "File-Path: $encoded_path" \
                  -H "Content-Type: application/octet-stream" \
                  -H "Content-Length: $actual_size" \
                  --data-binary "@$safe_filename" \
                  "${{ secrets.ALIST_BASE_URL }}/api/fs/put")
                
                echo "API响应: $response"
                
                # 检查上传结果
                if echo "$response" | jq -e '.code == 200' > /dev/null 2>&1; then
                  echo "✅ 上传成功: $asset_name"
                  
                  # 立即验证文件是否存在
                  echo "验证文件是否存在..."
                  sleep 2
                  
                  check_response=$(curl -s \
                    -H "Authorization: ${{ secrets.ALIST_TOKEN }}" \
                    "${{ secrets.ALIST_BASE_URL }}/api/fs/get?path=$encoded_path")
                  
                  if echo "$check_response" | jq -e '.code == 200' > /dev/null 2>&1; then
                    file_size=$(echo "$check_response" | jq -r '.data.size')
                    echo "✅ 文件确认存在: $asset_name (大小: $file_size bytes)"
                  else
                    echo "❌ 文件验证失败: $asset_name"
                    echo "验证响应: $check_response"
                  fi
                else
                  error_msg=$(echo "$response" | jq -r '.message // "未知错误"')
                  echo "❌ 上传失败: $asset_name - $error_msg"
                fi
                
                # 安全删除临时文件
                rm -f "$safe_filename"
                echo "----------------------------------------"
              else
                echo "❌ 文件不存在: $safe_filename"
              fi
            done
          done
          
          echo "🎉 同步完成"
