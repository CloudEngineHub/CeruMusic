/**
 * LiHouse 音乐插件
 * @author CodeBuddy
 * @version 1.0.0
 */

// 基础 URL
const baseTwoUrl = 'https://www.lihouse.xyz/coco_widget';

// 1. 插件信息
const pluginInfo = {
  name: 'ceru 音乐插件',
  version: '1.0.0',
  author: '时迁酱',
  description: '提供 网易云 音乐资源的访问'
}

// 2. 支持的音源配置
const sources = {
  wy: {
    name: '网易云',
    type: 'music',
    qualitys: ['320k'] // 假设支持这些音质
  }
}

// 3. 获取音乐URL的核心函数
async function musicUrl(source, musicInfo, quality) {
  // 从 cerumusic 对象获取 API
  const { request, env, version } = cerumusic

  // 构建请求参数
  const songId = musicInfo.songmid || musicInfo.hash;
  if (!songId) {
    throw new Error('无效的歌曲ID');
  }

  const apiUrl = `${baseTwoUrl}/music_resource/id/${songId}`;
  
  console.log(`[${pluginInfo.name}] 请求音乐链接: ${apiUrl}`);

  try {
    // 发起网络请求
    const { body, statusCode } = await request(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': `cerumusic-${env}/${version}`
      }
    });

    // 处理响应
    if (statusCode !== 200 || !body.status) {
      const errorMessage = body.message || '歌曲不存在';
      console.error(`[${pluginInfo.name}] Error: ${errorMessage}`);
      throw new Error(errorMessage);
    }

    // 根据请求的音质选择对应的链接
    // 假设 song_data 中包含不同音质的链接
    const songData = body.song_data;
    return songData.url
    
    throw new Error('无效的响应格式');
  } catch (error) {
    console.error(`[${pluginInfo.name}] 请求失败:`, error.message);
    throw new Error(`获取音乐链接失败: ${error.message}`);
  }
}
// 导出插件
module.exports = {
  pluginInfo,
  sources,
  musicUrl,
}
